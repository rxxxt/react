{"version":3,"sources":["components/common/FormsControls/FormsControls.js","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","assets/img/userPhoto.png","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPost/MyPost.module.css","components/Profile/MyPost/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.js","components/Profile/ProfileInfo/ProfileDataForm.js","components/Profile/ProfileInfo/ProfileInfo.js","components/Profile/MyPost/Post/Post.js","components/Profile/MyPost/MyPost.js","components/Profile/MyPost/MyPostContainer.js","components/Profile/Profile.js","components/Profile/ProfileContainer.js"],"names":["Textarea","input","meta","touched","error","props","hasError","className","styles","formControl","Input","module","exports","required","value","maxLengthCreator","maxLength","length","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","ProfileStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","ProfileDataReduxForm","reduxForm","form","handleSubmit","profile","onSubmit","c","formSummaryError","Field","placeholder","name","component","type","keys","contacts","map","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","descriptionBlock","src","photos","large","userPhoto","target","files","initialValues","formData","then","Post","item","message","like","maxLength10","AddPostFormRedux","validate","MyPost","postsElements","posts","p","id","post","likeCounter","postBlock","values","addPost","newPostText","MyPostContainer","connect","state","profilePage","Profile","ProfileContainer","userId","this","match","params","isAuth","authorizedUserId","history","setProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","React","Component","compose","auth","withRouter"],"mappings":"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","file":"static/js/4.c51f6c02.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from './FormsControls.module.css';\r\n\r\nexport const Textarea = ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Input = ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1w6hP\",\"error\":\"FormsControls_error___FXIS\"};","export const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is Required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","module.exports = __webpack_public_path__ + \"static/media/userPhoto.25452ffd.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__13k_d\",\"item\":\"ProfileInfo_item__3KAXj\",\"contact\":\"ProfileInfo_contact__tO1lj\",\"formSummaryError\":\"ProfileInfo_formSummaryError__3812w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPost_postBlock__CWljW\",\"post\":\"MyPost_post__1XYbk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2RGjs\"};","import React, {useEffect, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\nconst ProfileStatus = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n    let activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    let deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    let onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"_______\"}</span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange}\r\n                       autoFocus={true}\r\n                       onBlur={deActivateEditMode}\r\n                       value={status}/>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatus;\r\n","import React from \"react\";\r\nimport c from \"./ProfileInfo.module.css\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button>save</button>\r\n        </div>\r\n        {error && <div className={c.formSummaryError}>{error}</div>}\r\n        <div>\r\n            <b>Full name</b>: <Field placeholder={\"Full name\"} name={\"fullName\"} component={Input}/>\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: <Field component={Input} name={\"lookingForAJob\"} type={\"checkbox\"}/>\r\n        </div>\r\n        <div>\r\n            <b>My professional skills</b>: <Field placeholder={\"My professional skills\"}\r\n                                                  name={\"lookingForAJobDescription\"} component={Textarea}/>\r\n        </div>\r\n        <div>\r\n            <b>About me</b>: <Field placeholder={\"About me\"} name={\"aboutMe\"} component={Textarea}/>\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={c.contact}>\r\n                <b>{key}</b>: <Field placeholder={key} name={\"contacts.\" + key} component={Input}/>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataReduxForm;\r\n","import React, {useState} from \"react\";\r\nimport c from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/preloader/preloader\";\r\nimport userPhoto from \"../../../assets/img/userPhoto.png\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileDataReduxForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({isOwner, profile, status, updateStatus, savePhoto, saveProfile}) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={c.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto}/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner}\r\n                                   goToEditMode={() => {\r\n                                       setEditMode(true)\r\n                                   }}/>}\r\n                <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>}\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={c.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport c from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={c.item}>\r\n            <img src='https://i03.fotocdn.net/s119/11a097ff366bfb24/user_l/2713047325.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.like}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport c from \"./MyPost.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst MyPost = (props) => {\r\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.post} like={p.likeCounter}/>);\r\n\r\n    let AddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={c.postBlock}>\r\n            <h3>My post</h3>\r\n            <AddPostFormRedux onSubmit={AddPost}/>\r\n            <div className={c.post}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst MyPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newPostText\" component={Textarea} placeholder={'Post message'}\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm({form: 'AddPostForm'})(MyPostForm);\r\n\r\nexport default MyPost;","import React from \"react\";\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\nimport MyPost from \"./MyPost\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst MyPostContainer = connect (mapStateToProps, {addPost}) (MyPost);\r\n\r\nexport default MyPostContainer;","import React from \"react\";\r\nimport c from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostContainer from \"./MyPost/MyPostContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (<div>\r\n        <ProfileInfo isOwner={props.isOwner}\r\n                     profile={props.profile}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatus}\r\n                     savePhoto={props.savePhoto}\r\n                     saveProfile={props.saveProfile}/>\r\n        <MyPostContainer/>\r\n    </div>);\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserStatus, savePhoto, saveProfile, setProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId && this.props.isAuth) {\r\n            userId = this.props.authorizedUserId;\r\n        } if (!userId) {\r\n            this.props.history.push(\"/login\");\r\n        }\r\n        this.props.setProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (<Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                         saveProfile={this.props.saveProfile}/>);\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {setProfile, getUserStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);"],"sourceRoot":""}